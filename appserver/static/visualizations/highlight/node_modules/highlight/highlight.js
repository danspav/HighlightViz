class Highlight{
	constructor(){
		this.headers = [];
		this.rows = [];
		this.keywords=[];
		this.exceptions=[];
		this.colours=[];
		this.activeColumns=[];
		this.activeColumnIDs=[];
		this.id= Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);
	};
	
	setNoMatchRows(val){
		this.noMatchRows = parseInt(val);
	}
	
	// Don't add this to every column - just the ones we want
	addActiveColumn(str){
		this.activeColumns.push(str);
	}
	
	// Test to see if a column name is "active" by passing the data.fields["name"] for this column
	isActiveColumn(strColumnName){
		var i;
		for(i=0;i<this.activeColumns.length;i++)
		{
			if(this.activeColumns[i]==strColumnName){
				return true;
			}
		}
		return false;
	}
	
	addKeyword(str,colour){
		// Escape regex characters:
		if (str!=""){
			
			str = this.escapeHTML(str);
			str = str.replace(/([\^\$\(\)\.\[\\\{\}\]\*\+\?])/g, "\\$1");
			this.keywords.push(str);
			if(colour==""){
				colour="red"
			}
			this.colours.push(colour);
		}
	}
	
	addExceptions(strExceptions){
		// Break up by lines:
		var aExceptions=  strExceptions.split("\n");
		var str="";
		var i = 0;
		
		for( i=0; i < aExceptions.length; i++){
			str = aExceptions[i];
			if (str==""){
				continue;
			}
			str = this.escapeHTML(str)
			str = str.replace(/([\^\$\(\)\.\[\\\{\}\]\*\+\?])/g, "\\$1");
			this.exceptions.push(str);
		}
	}
	
	//Test a string to see if it contains an exception to the highlight key words
	hasExceptions(str){
		var i = 0;
		var rexString;
		var rex;
		var retVal = false;
		for( i=0; i<this.exceptions.length; i++){
			rexString="^(.*)(" + this.exceptions[i] + ")(.*)$";
			rex = new RegExp(rexString,"gim");
			if (rex.test(str)){
				retVal = true;
				break;
			}
		}
		return retVal;
	}
	
	
	addData(data){
		var i =0;
		var j=0;
		var identifier="";
		var newRow = [];
		var isActiveColumn = false;
			for(i=0;i<data.fields.length;i++){
			this.headers.push(data.fields[i].name);
		}
		
		for(i=0;i<data.rows.length;i++){
			newRow = [];
			for(j=0; j<data.rows[i].length;j++){
				isActiveColumn = this.isActiveColumn(data.fields[j].name);
				identifier = "row_" + i + "_col_" + j;
				// First Escape
				data.rows[i][j] = this.escapeHTML(data.rows[i][j]);
				// Then make multi-line
				data.rows[i][j]=this.makeMultiLine(data.rows[i][j], identifier, isActiveColumn)
				// now you can save
				newRow[j] = [];
				newRow[j]['text']=data.rows[i][j];
				newRow[j]['isActiveColumn'] = isActiveColumn;
				newRow[j]['identifier'] = identifier;
				
			}
			this.rows.push(newRow);
		}
	}
	
	makeMultiLine(strContent, identifier, isActiveColumn){
		var keyword="";
		var rex;
		var rexString = "";
		var i;
		var matches;
		var match;
		var hasExceptions = false;
		var colour="";
		var numMatches = 0;
		if(isActiveColumn)
		{
			for(i=0;i<this.keywords.length;i++){
				if(this.colours[i]) {
					colour=this.colours[i];
				}else{
					colour="red";
				}
				//If the key word is blank, don't highlight
				if(this.keywords[i]==""){
					continue;
				}
				rexString="^(?!<div class=\"highlight_line)(.*)(" + this.keywords[i] + ")(.*)$";
				rex = new RegExp(rexString,"im");
				while (rex.test(strContent)){
					
					// First we find a string to match
					match = strContent.match(rex);
					
					//Check for exceptions
					if(! this.hasExceptions(match[0])) { 
						numMatches++;
						strContent=strContent.replace(rex, '<div class="highlight_line highlight" style="background-color: ' + colour + '!important;">' + "$1$2$3" + '</div>');
					}else{
						//We need to temporarily update this exception-match so we don't get stuck in infinite loop
						strContent=strContent.replace(rex, '<div class="highlight_line EXCEPTION">' + "$1$2$3");
					}
				}
			}
			
			//Now undo the exceptions
			rex = new RegExp("^<div class=\"highlight_line EXCEPTION\">","gim");
			strContent=strContent.replace(rex, "");
			
			if(numMatches==0){
				//Show the first this.noMatchRows lines if there were no matches
				rexString="^(?!<div class=\"highlight_line)(.*)$";
				rex = new RegExp(rexString,"im");
				for(i=0; i<this.noMatchRows;i++){
					strContent=strContent.replace(rex, '<div class="highlight_line highlight" style="background-color: transparent!important;">' + "$1" + '</div>');
				}
			}
			
			
			// Now label all lines that weren't highlighted
			rex = /^(?!<div class="highlight_line highlight)(.+)$/gmi;
			strContent=strContent.replace(rex, '<div class="highlight_line  ' + this.id + '_' + identifier + '" style="display:none;">' + "$1" + '</div>');
		}else{
			// Don't highlight or make invisible. Just make multiline
			rex = /^(?!<div class="highlight_line highlight)(.+)$/gmi;
			strContent=strContent.replace(rex, '<div class="highlight_line  ' + this.id + '_' + identifier + '">' + "$1" + '</div>');	
		}
		return strContent;
	}
	
	escapeHTML(text) {
		  var map = {
			'&': '&amp;',
			'<': '&lt;',
			'>': '&gt;',
			'"': '&quot;',
			"'": '&#039;',
			" ": '&nbsp;'
		  };
		return text.replace(/[&<>"' ]/g, function(m) { return map[m]; });
	}
	
	// Create the "Show all 14 lines" link
	getToggleHTML(identifier, lineCount)
	{
		var message = "Show all " + lineCount + " lines";
		if (lineCount==1) {
			message = "Show 1 line";
		}
		var html = '<div class="highlight_toggle"><a href="#" onclick="$(\'div.' + this.id + '_' + identifier + '\').slideToggle();if(this.innerText==\'' + message + '\'){ this.innerText=\'Collapse\';} else{ this.innerText=\'' + message + '\';}return false;">' + message + '</a>';
		html += " &bull; ";
		html += '<a href="#" onClick="var $temp = $(\'<input>\');$(\'body\').append($temp);$temp.val($(\'.' + this.id + '_' + identifier + '\').text()).select();document.execCommand(\'copy\');$temp.remove();return false;" title="Copy to clipboard">Copy to clipboard</a>';
		html += '</div>';
		return html;
	}
	
	
	
	getHTML(){
		var html='<table class="highlight_table"><tr>';
		var i = 0;
		var j = 0;
		var lineCount=0;
		var identifier = "";
		var cssClass = "even";
		for (i=0;i<this.headers.length;i++){
			html += '<th>' + this.headers[i] + '</th>';
		}
		html +='</tr>';
		for (i=0;i<this.rows.length;i++){
			cssClass=(i%2==0)?"even":"odd";
			html+='<tr class="' + cssClass + '">';
				for(j=0; j<this.rows[i].length;j++){
					identifier = this.rows[i][j].identifier;
					// Get line count:
					lineCount = (this.rows[i][j]['text'].match(/<div class="highlight_line/g) || []).length
					html += '<td>';
					if(this.rows[i][j]['isActiveColumn']) html += this.getToggleHTML(this.id + '_' +identifier, lineCount);
					html += this.rows[i][j]['text'];
					html += '</td>';
				}
			html+='</tr>';
		}
		html +='</table>';
		return html;
	}
	
	
	getDIVs(){
		var html='<div class="highlightTable"><div class="highlightTR">';
		var i = 0;
		var j = 0;
		var lineCount=0;
		var identifier = "";
		var cssClass = "even";
		for (i=0;i<this.headers.length;i++){
			html += '<div class="highlightTH">' + this.headers[i] + '</div>';
		}
		html +='</div><div class="highlightTBODY">';
		for (i=0;i<this.rows.length;i++){
			cssClass=(i%2==0)?"even":"odd";
			html+='<div class="highlightTR ' + cssClass + '">';
				for(j=0; j<this.rows[i].length;j++){
					identifier = this.rows[i][j].identifier;
					// Get line count:
					lineCount = (this.rows[i][j]['text'].match(/<div class="highlight_line/g) || []).length
					html += '<div class="highlightTD">'; 
					if(this.rows[i][j]['isActiveColumn']) html += this.getToggleHTML(identifier, lineCount);
					html += this.rows[i][j]['text'];
					html += '</div>';
				}
			html+='</div>';
		}
		html +='</div></div>';
		return html;
		
	}
	
	
}
	

module.exports = {Highlight}

